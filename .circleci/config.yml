version: 2.1

# @param trigger-message: A summary message of what triggered the pipeline to run
# set when triggering pipelines in flipDevTools::TriggerRevDepPipelines() step
# @param remote-deps: A comma-separated string of GitHub refs, which can
# be used to install specific branches of dependencies; used by both
# flipDevTools::InstallDeps() and TriggerRevDepPipelines;
# e.g. "Displayr/flipU@DS-4300,cran/survey@4.0"
# @param plugins-branch String specifying a branch of the Displayr/Plugins
# repo to trigger a build in (if the workflow is a success), the default "" does not
# trigger a build in Plugins
# @param triggered-packages: A comma-separated string of reverse depenendency
# packages which have already been triggered, i.e. should be excluded (not triggered)
# by TriggerRevDepPipelines() in the Trigger reverse dependencies step; it is updated
# automatically by that function to ensure each package is triggered at most once.
parameters:
    trigger-message:
        type: string
        default: ""
    remote-deps:
        type: string
        default: ""
    plugins-branch:
        type: string
        default: ""
    triggered-packages:
        type: string
        default: ""

executors:
  default:
    machine:
        image: ubuntu-2204:current
    resource_class: small

workflows:
  build-and-check-R-package:
    jobs:
      - build-and-check-package:
          context:
            - r_packages
      - deploy-package:
          requires:
            - build-and-check-package
          context:
            - r_packages
          filters:
            branches:
              only:
                - master

jobs:
  build-and-check-package:
    executor: default
    environment:
        REMOTE_DEPS: <<pipeline.parameters.remote-deps>>
        PLUGINS_BRANCH: <<pipeline.parameters.plugins-branch>>
        TRIGGER_MESSAGE: <<pipeline.parameters.trigger-message>>
        TRIGGERED_PACKAGES: <<pipeline.parameters.triggered-packages>>

    steps:
      - checkout

      - when:
          condition: <<pipeline.parameters.trigger-message>>
          steps:
            - run: echo "<<pipeline.parameters.trigger-message>>"

      # create a unique env var for the cache. Unfortunately normal env vars
      # are not picked up by the cache, therefore this workaround is needed.
      # See https://discuss.circleci.com/t/cannot-use-circle-yml-environment-variables-in-cache-keys/10994/7
      - run: echo "$(Rscript -e 'cat(format(getRversion()))')" > /tmp/R_version
      - run: echo "v3" > /tmp/cache_vers  # Increment this to invalidate cache
      - restore_cache:
          key: R-package-library-{{ checksum "/tmp/cache_vers" }}-{{ checksum "/tmp/R_version" }}

      # install deps and check pkg ---------------------------------------------
      # https://discuss.circleci.com/t/caching-apt-get-packages/9076
      - run:
          name: "Install apt dependencies"
          command: |
            sudo apt-get install software-properties-common dirmngr grub-efi-amd64-signed shim-signed
            sudo mv /etc/apt/sources.list.d /etc/apt/sources.list.d.save
            sudo mkdir /etc/apt/sources.list.d
            sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
            wget -qO- https://cloud.r-project.org/bin/linux/ubuntu/marutter_pubkey.asc | \
            sudo tee -a /etc/apt/trusted.gpg.d/cran_ubuntu_key.asc
            sudo add-apt-repository -y "deb https://cloud.r-project.org/bin/linux/ubuntu $(lsb_release -cs)-cran40/"
            sudo add-apt-repository -y ppa:c2d4u.team/c2d4u4.0+
            # Make the cache dir if it doesn't exist
            if ! [[ -d ../vendor/apt ]]; then
              mkdir -p ../vendor/apt
            fi
            # Install R if it doesn't exist
            if [[ ! -e /usr/bin/R ]]; then
              if ! [[ -d ../vendor/apt/archives ]]; then
                sudo apt-get update && sudo apt-get install --download-only -y ccache pandoc \
                libgit2-dev libharfbuzz-dev libfribidi-dev libprotoc-dev libprotobuf-dev \
                libv8-dev librsvg2-dev libmpfr-dev libnlopt-dev libgdal-dev libproj-dev \
                r-base r-cran-devtools
                sudo cp -R /var/cache/apt ../vendor/
                # Making sure our user has ownership, in order to cache
                sudo chown -R ubuntu:ubuntu ../vendor/apt
              fi
              # Install all packages in the cache; https://askubuntu.com/a/1454102
              sudo rm /var/cache/debconf/config.dat
              sudo dpkg -i ../vendor/apt/archives/*.deb
            fi

      - run:
          name: "Install R dependencies"
          command: |
            sudo bash -c 'cd /usr/local/bin; curl -L https://aka.ms/downloadazcopy-v10-linux | \
            tar --strip-components=1 --exclude=*.txt -xzvf -; chmod +x azcopy'
            R -q -e 'if (!dir.exists("~/R/library")) dir.create("~/R/library", recursive = TRUE)'
            echo -e 'options(Ncpus = 4, repos = structure(c(CRAN = "https://cloud.r-project.org/")))' > $HOME/.Rprofile
            export R_HOME=`R RHOME`
            echo -e ".libPaths(c('$HOME/R/library', '/usr/lib/R/site-library', '/usr/lib/R/library'))" | \
            sudo tee -a $R_HOME/etc/Rprofile.site
            R -q -e 'remotes::install_github("Displayr/flipDevTools")'
            R -q -e 'options(warn = 2); flipDevTools::InstallDeps(dependencies = TRUE)'

      - save_cache:
          key: R-package-library-{{ checksum "/tmp/cache_vers" }}-{{ checksum "/tmp/R_version" }}
          paths:
            - ../R/library
            - ../vendor/apt

      - run:
          name: "Check package"
          command: >-
            R -q -e 'rcmdcheck::rcmdcheck(
            args = c("--no-manual", "--ignore-vignettes", "--no-tests"),
            build_args = c("--no-build-vignettes", "--no-manual"),
            error_on = "warning")'

      - run:
          name: "Run unit tests"
          no_output_timeout: 80m
          command: R -e 'q(status = flipDevTools::RunTestsOnCircleCI(), save = "no")'

      - store_test_results:
          path: testthat.xml

      - store_artifacts:
          path: testthat.xml

      - run:
          name: Build source and binary package
          command: |
            R CMD build --no-build-vignettes .
            R CMD INSTALL --build .
            mkdir built && cp *.tar.gz built/

      - run:
          name: "Trigger reverse dependencies"
          command: R -e '#flipDevTools::TriggerRevDepPipelines()'

      - persist_to_workspace:
          root: .
          paths:
            - built/

  deploy-package:
    executor: default

    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Set environment variables"
          command: |
            echo "$(R -q -e 'cat(format(getRversion()))')" > /tmp/R_version
            echo "v3" > /tmp/cache_vers  # Increment this to invalidate cache
            sudo bash -c 'cd /usr/local/bin; curl -L https://aka.ms/downloadazcopy-v10-linux | \
            tar --strip-components=1 --exclude=*.txt -xzvf -; chmod +x azcopy'
            echo -e ".libPaths(c('$HOME/R/library', '/usr/lib/R/site-library', '/usr/lib/R/library'))" | \
            sudo tee -a $R_HOME/etc/Rprofile.site
      - restore_cache:
          key: R-package-library-{{ checksum "/tmp/cache_vers" }}-{{ checksum "/tmp/R_version" }}
      - run:
          name: "Deploy package to drat Repository (Azure container)"
          command: R -e 'flipDevTools::DeployPackage()'
